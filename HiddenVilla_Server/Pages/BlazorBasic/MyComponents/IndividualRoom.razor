@*Pages\BlazorBasic\MyComponents\IndividualRoom.razor*@
@using Model
<div class="bg-light border p-2 col-5 m-2 offset-1">
    <h4 class="text-secondary">Room - @Room.Id</h4>
    <input type="checkbox" @onchange="RoomCheckboxSelectionChanged" />
    @Room.RoomName <br />
    @Room.Price.ToString("c") <br />
    <input type="checkbox" @bind-value="@Room.IsActive" checked="@(Room.IsActive?"checked":null)" /> Room Status <br />
    <div>
        This room is
        @if (Room.IsActive)
        {
            <span>Active</span> <br />
            @foreach (var prop in Room.RoomProps)
            {
                <span>@prop.Name - @prop.Value  </span><br />
            }
        }
        else
        {
            <span>Inactive</span>
        } <br />
    </div>

    @*<HiddenVilla_Server.Pages.BlazorBasic.MyComponents.EditDeleteButton/>*@
    <EditDeleteButton IsAdmin="false" />
</div>

@code {
    [Parameter]
    public BlazorRoom Room { get; set; }
    [Parameter]
    public EventCallback<bool> OnRoomCheckboxSelection { get; set; }    @*Callback Event Parameter*@
        @* <bool> - parameter of RoomSelectionCounterChanged(bool isRoomSelected) *@

    //Invoke the Parent's method - RoomSelectionCounterChanged
    protected async Task RoomCheckboxSelectionChanged(ChangeEventArgs e)
    {
        //use ChangeEventArgs to determine if the checkbox is changed, pass it to isRoomSelected parameter
        await OnRoomCheckboxSelection.InvokeAsync((bool)e.Value);
    }
}
